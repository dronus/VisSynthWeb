{
  "name": "lcd",
  "version": "1.1.3",
  "description": "Hitachi HD44780 LCD driver",
  "main": "lcd.js",
  "directories": {
    "example": "example",
    "test": "test"
  },
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/fivdi/lcd.git"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "dependencies": {
    "onoff": "~1.0.4",
    "q": "~1.4.1"
  },
  "devDependencies": {
    "async": "~0.9.0",
    "chai": "^2.1.0",
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^0.11.0",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-mocha-test": "^0.12.7",
    "mocha": "^2.1.0",
    "sinon": "^1.12.2"
  },
  "keywords": [
    "lcd",
    "hd44780",
    "gpio",
    "beaglebone",
    "bbb",
    "bb",
    "raspberry",
    "raspi",
    "rpi",
    "pi",
    "linux"
  ],
  "author": {
    "name": "fivdi"
  },
  "license": "MIT",
  "readme": "## lcd\n\nA **Node.js** Hitachi HD44780 LCD driver for Linux boards like the Raspberry Pi\nZero, 1, 2, or 3, BeagleBone, or BeagleBone Black. Heavily inspired by the\nArduino\n[LiquidCrystal library](http://arduino.cc/en/Tutorial/LiquidCrystal).\n\nMost LCDs compatible with the HD44780 have a sixteen pin interface. This\nNode.js module uses six of these interface pins for controlling such displays.\nRegister select (RS), enable (E), and four data bus pins (D4-D7). The\nread/write (R/W) pin is assumed to be tied low to permanently select write\nmode.\n\n## Installation\n\n    $ npm install lcd\n\nIf you're using Node.js v4 or higher and seeing lots of compile errors when\ninstalling lcd, it's very likely that gcc/g++ 4.8 or higher are not installed.\nSee\n[Node.js v4 and native addons](https://github.com/fivdi/onoff/wiki/Node.js-v4-and-native-addons)\nfor details.\n\nIf you're using Node.js v0.10.29 on the Raspberry Pi and seeing a compile\nerror saying that `‘REPLACE_INVALID_UTF8’ is not a member of ‘v8::String’`\nsee [Node.js v0.10.29 and native addons on the Raspberry Pi](https://github.com/fivdi/onoff/wiki/Node.js-v0.10.29-and-native-addons-on-the-Raspberry-Pi).\n\nIf you're using Node.js v0.10.29 on the BeagleBone Black and seeing a compile\nerror saying that `‘REPLACE_INVALID_UTF8’ is not a member of ‘v8::String’`\nsee [Node.js v0.10.29 and native addons on the BeagleBone Black](https://github.com/fivdi/onoff/wiki/Node.js-v0.10.29-and-native-addons-on-the-BeagleBone-Black).\n\n## Usage\n\nThe following program can be used to make a UTC digital clock.\n\n```js\nvar Lcd = require('lcd'),\n  lcd = new Lcd({rs: 27, e: 65, data: [23, 26, 46, 47], cols: 8, rows: 1});\n\nlcd.on('ready', function () {\n  setInterval(function () {\n    lcd.setCursor(0, 0);\n    lcd.print(new Date().toISOString().substring(11, 19), function (err) {\n      if (err) {\n        throw err;\n      }\n    });\n  }, 1000);\n});\n\n// If ctrl+c is hit, free resources and exit.\nprocess.on('SIGINT', function () {\n  lcd.close();\n  process.exit();\n});\n```\n\nHere it is up and running on a BeagleBone Black wired up to an 8x1 display:\n\n<img src=\"https://github.com/fivdi/lcd/raw/master/example/digital-clock-8x1.jpg\">\n\nAfter requiring the lcd module, the above program creates an Lcd object. The\nconstructor function is passed all the necessary information.\n\nThe six LCD interface pins used to control the display need to be wired up to\nsix GPIOs on the BeagleBone Black. GPIOs on Linux are identified by unsigned\nintegers. The relevant information for all six GPIOs used here is shown in the\nfollowing table:\n\nBBB Expansion Header | GPIO No. | LCD Function | LCD Pin No.\n:---: | :---: | :---: | :---:\nP8_13 | 23 | Data Bus Bit 4 | 11\nP8_14 | 26 | Data Bus Bit 5 | 12\nP8_15 | 47 | Data Bus Bit 7 | 14\nP8_16 | 46 | Data Bus Bit 6 | 13\nP8_17 | 27 | Register Select |  4\nP8_18 | 65 | Enable  |  6\n\nThe constructor function is also told how many columns and rows the display\nhas, eight and one respectively in this case.\n\nIt takes several milliseconds to initialize an LCD. The constructor starts the\ninitialization process, but it doesn't wait for it to complete. Instead,\na 'ready' event is emitted after the LCD has been completely initialized and is\nready for usage.\n\nThe 'ready' handler leverages setInterval to execute a function that updates\nthe time displayed on the LCD once a second.\n\n## API\n\n**Lcd(config)**\n\nReturns a new Lcd object which inherits from EventEmitter. A 'ready' event will\nbe emitted when the display is ready for usage.\n\nThe config object has these possibilities:\n\n * **cols** LCD column count. Defaults to 16.\n * **rows** LCD row count. Defaults to 1.\n * **largeFont** Use 5x10 dot font. Defaults to false for 5x8 dot font.\n * **rs** Register select GPIO number.\n * **e** Enable GPIO number.\n * **data** Array of four GPIO numbers for data bus bits D4 through D7.\n\n**print(val, [callback])**\n\nConverts val to string and writes it to the display **asynchronously**.\n\nIf the optional completion callback is omitted, a 'printed' event is emitted\nafter the operation has completed. The string representation of val is passed\nto the 'printed' event handler as the first argument. If an error occurs, an\n'error' event will be emitted and an error object will be passed to the\n'error' event handler as the first argument.\n\nIf the optional completion callback is specified, it gets two arguments\n(err, str), where err is reserved for an error object and str is the string\nrepresentation of val. If the optional completion callback is specified, no\n'printed' or 'error' event will be emitted.\n\nThe example print-twice-20x4.js demonstrates how to print two strings in\nsuccession.\n\n**clear([callback])**\n\nClears display and returns cursor to the home position **asynchronously**.\n\nIf the optional completion callback is omitted, a 'clear' event is emitted\nafter the operation has completed. If an error occurs, an 'error' event will\nbe emitted and an error object will be passed to the 'error' event handler\nas the first argument.\n\nIf the optional completion callback is specified, it gets one argument (err),\nwhere err is reserved for an error object. If the optional completion callback\nis specified, no 'clear' or 'error' event will be emitted.\n\n**home([callback])**\n\nReturns cursor to home position **asynchronously**. Also returns display being\nshifted to the original position.\n\nIf the optional completion callback is omitted, a 'home' event is emitted\nafter the operation has completed. If an error occurs, an 'error' event will\nbe emitted and an error object will be passed to the 'error' event handler\nas the first argument.\n\nIf the optional completion callback is specified, it gets one argument (err),\nwhere err is reserved for an error object. If the optional completion callback\nis specified, no 'home' or 'error' event will be emitted.\n\n**setCursor(col, row)** Moves the cursor to the specified col and row.\nNumbering for col and row starts at zero.\n\n**cursor()** Turn cursor on.\n\n**noCursor()** Turn cursor off.\n\n**blink()** Turn cursor blink on.\n\n**noBlink()** Turn cursor blink off.\n\n**scrollDisplayLeft()** Shift display to the left. Cursor follows the display\nshift.\n\n**scrollDisplayRight()** Shift display to the right. Cursor follows the display\nshift.\n\n**leftToRight()** Sets cursor move direction to left to right.\n\n**rightToLeft()** Sets cursor move direction to right to left.\n\n**autoscroll()** Automatically shift display when data is written to display.\n\n**noAutoscroll()** Turn automatic shifting off.\n\n**close()** Frees (unexports) all GPIOs used by the Lcd.\n\n## Example \"Hello, World!\" on an 8x1 display\n\n\"Hello, World!\" is five characters too long for an 8x1 display, but by moving\nthe cursor to the ninth column, turning autoscroll on, and displaying a new\ncharacter every 300 milliseconds the text can be scrolled onto the display\ncharacter by character. Note that an 8x1 display actually has eighty columns\nbut only eight of them are visible.\n\n```js\nvar Lcd = require('lcd'),\n  lcd = new Lcd({rs: 27, e: 65, data: [23, 26, 46, 47], cols: 8, rows: 1});\n\nfunction print(str, pos) {\n  pos = pos || 0;\n\n  if (pos === str.length) {\n    pos = 0;\n  }\n\n  lcd.print(str[pos], function (err) {\n    if (err) {\n      throw err;\n    }\n\n    setTimeout(function () {\n      print(str, pos + 1);\n    }, 300);\n  });\n}\n\nlcd.on('ready', function () {\n  lcd.setCursor(8, 0);\n  lcd.autoscroll();\n  print('Hello, World! ** ');\n});\n\n// If ctrl+c is hit, free resources and exit.\nprocess.on('SIGINT', function () {\n  lcd.close();\n  process.exit();\n});\n```\n\n## Tested with the following displays\n\n[NHD-0108FZ-FL-YBW-33V3](http://www.newhavendisplay.com/nhd0108fzflybw33v3-p-5155.html)\n\n[NHD-0420DZ-FL-YBW-33V3](http://www.newhavendisplay.com/nhd0420dzflybw33v3-p-5168.html)\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/fivdi/lcd/issues"
  },
  "homepage": "https://github.com/fivdi/lcd",
  "_id": "lcd@1.1.3",
  "dist": {
    "shasum": "3d36d17b7ab11ae2e1b8450d80f87d642f82ca84"
  },
  "_from": "lcd@",
  "_resolved": "https://registry.npmjs.org/lcd/-/lcd-1.1.3.tgz"
}
